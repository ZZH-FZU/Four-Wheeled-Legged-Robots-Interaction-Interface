// Generated by gencpp from file whole_body_state_msgs/JointState.msg
// DO NOT EDIT!


#ifndef WHOLE_BODY_STATE_MSGS_MESSAGE_JOINTSTATE_H
#define WHOLE_BODY_STATE_MSGS_MESSAGE_JOINTSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace whole_body_state_msgs
{
template <class ContainerAllocator>
struct JointState_
{
  typedef JointState_<ContainerAllocator> Type;

  JointState_()
    : name()
    , position(0.0)
    , velocity(0.0)
    , acceleration(0.0)
    , effort(0.0)  {
    }
  JointState_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , position(0.0)
    , velocity(0.0)
    , acceleration(0.0)
    , effort(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _name_type;
  _name_type name;

   typedef double _position_type;
  _position_type position;

   typedef double _velocity_type;
  _velocity_type velocity;

   typedef double _acceleration_type;
  _acceleration_type acceleration;

   typedef double _effort_type;
  _effort_type effort;





  typedef boost::shared_ptr< ::whole_body_state_msgs::JointState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::whole_body_state_msgs::JointState_<ContainerAllocator> const> ConstPtr;

}; // struct JointState_

typedef ::whole_body_state_msgs::JointState_<std::allocator<void> > JointState;

typedef boost::shared_ptr< ::whole_body_state_msgs::JointState > JointStatePtr;
typedef boost::shared_ptr< ::whole_body_state_msgs::JointState const> JointStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::whole_body_state_msgs::JointState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::whole_body_state_msgs::JointState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::whole_body_state_msgs::JointState_<ContainerAllocator1> & lhs, const ::whole_body_state_msgs::JointState_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.position == rhs.position &&
    lhs.velocity == rhs.velocity &&
    lhs.acceleration == rhs.acceleration &&
    lhs.effort == rhs.effort;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::whole_body_state_msgs::JointState_<ContainerAllocator1> & lhs, const ::whole_body_state_msgs::JointState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace whole_body_state_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::whole_body_state_msgs::JointState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::whole_body_state_msgs::JointState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::whole_body_state_msgs::JointState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::whole_body_state_msgs::JointState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::whole_body_state_msgs::JointState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::whole_body_state_msgs::JointState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::whole_body_state_msgs::JointState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b5c92fc99c5d79e265770c8ce99bf79f";
  }

  static const char* value(const ::whole_body_state_msgs::JointState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb5c92fc99c5d79e2ULL;
  static const uint64_t static_value2 = 0x65770c8ce99bf79fULL;
};

template<class ContainerAllocator>
struct DataType< ::whole_body_state_msgs::JointState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "whole_body_state_msgs/JointState";
  }

  static const char* value(const ::whole_body_state_msgs::JointState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::whole_body_state_msgs::JointState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This message describes the state of an actuated joints.\n"
"#\n"
"# The state of each joint (revolute or prismatic) is defined by:\n"
"#  * the joint name\n"
"#  * the position of the joint (rad or m),\n"
"#  * the velocity of the joint (rad/s or m/s),\n"
"#  * the acceleration of the joint (rad/s^2 or m/s^2), and\n"
"#  * the effort that is applied in the joint (Nm or N).\n"
"#\n"
"# Each joint is uniquely identified by its name\n"
"\n"
"\n"
"# Name of the joint\n"
"string name\n"
"\n"
"# States of the joint\n"
"float64 position\n"
"float64 velocity\n"
"float64 acceleration\n"
"float64 effort\n"
;
  }

  static const char* value(const ::whole_body_state_msgs::JointState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::whole_body_state_msgs::JointState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.position);
      stream.next(m.velocity);
      stream.next(m.acceleration);
      stream.next(m.effort);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct JointState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::whole_body_state_msgs::JointState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::whole_body_state_msgs::JointState_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name);
    s << indent << "position: ";
    Printer<double>::stream(s, indent + "  ", v.position);
    s << indent << "velocity: ";
    Printer<double>::stream(s, indent + "  ", v.velocity);
    s << indent << "acceleration: ";
    Printer<double>::stream(s, indent + "  ", v.acceleration);
    s << indent << "effort: ";
    Printer<double>::stream(s, indent + "  ", v.effort);
  }
};

} // namespace message_operations
} // namespace ros

#endif // WHOLE_BODY_STATE_MSGS_MESSAGE_JOINTSTATE_H
