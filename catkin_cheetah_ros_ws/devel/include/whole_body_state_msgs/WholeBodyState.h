// Generated by gencpp from file whole_body_state_msgs/WholeBodyState.msg
// DO NOT EDIT!


#ifndef WHOLE_BODY_STATE_MSGS_MESSAGE_WHOLEBODYSTATE_H
#define WHOLE_BODY_STATE_MSGS_MESSAGE_WHOLEBODYSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <whole_body_state_msgs/CentroidalState.h>
#include <whole_body_state_msgs/JointState.h>
#include <whole_body_state_msgs/ContactState.h>

namespace whole_body_state_msgs
{
template <class ContainerAllocator>
struct WholeBodyState_
{
  typedef WholeBodyState_<ContainerAllocator> Type;

  WholeBodyState_()
    : header()
    , time(0.0)
    , centroidal()
    , joints()
    , contacts()  {
    }
  WholeBodyState_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , time(0.0)
    , centroidal(_alloc)
    , joints(_alloc)
    , contacts(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _time_type;
  _time_type time;

   typedef  ::whole_body_state_msgs::CentroidalState_<ContainerAllocator>  _centroidal_type;
  _centroidal_type centroidal;

   typedef std::vector< ::whole_body_state_msgs::JointState_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::whole_body_state_msgs::JointState_<ContainerAllocator> >> _joints_type;
  _joints_type joints;

   typedef std::vector< ::whole_body_state_msgs::ContactState_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::whole_body_state_msgs::ContactState_<ContainerAllocator> >> _contacts_type;
  _contacts_type contacts;





  typedef boost::shared_ptr< ::whole_body_state_msgs::WholeBodyState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::whole_body_state_msgs::WholeBodyState_<ContainerAllocator> const> ConstPtr;

}; // struct WholeBodyState_

typedef ::whole_body_state_msgs::WholeBodyState_<std::allocator<void> > WholeBodyState;

typedef boost::shared_ptr< ::whole_body_state_msgs::WholeBodyState > WholeBodyStatePtr;
typedef boost::shared_ptr< ::whole_body_state_msgs::WholeBodyState const> WholeBodyStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::whole_body_state_msgs::WholeBodyState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::whole_body_state_msgs::WholeBodyState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::whole_body_state_msgs::WholeBodyState_<ContainerAllocator1> & lhs, const ::whole_body_state_msgs::WholeBodyState_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.time == rhs.time &&
    lhs.centroidal == rhs.centroidal &&
    lhs.joints == rhs.joints &&
    lhs.contacts == rhs.contacts;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::whole_body_state_msgs::WholeBodyState_<ContainerAllocator1> & lhs, const ::whole_body_state_msgs::WholeBodyState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace whole_body_state_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::whole_body_state_msgs::WholeBodyState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::whole_body_state_msgs::WholeBodyState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::whole_body_state_msgs::WholeBodyState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::whole_body_state_msgs::WholeBodyState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::whole_body_state_msgs::WholeBodyState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::whole_body_state_msgs::WholeBodyState_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::whole_body_state_msgs::WholeBodyState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "094da535c1076730e6ed16a0acd60d71";
  }

  static const char* value(const ::whole_body_state_msgs::WholeBodyState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x094da535c1076730ULL;
  static const uint64_t static_value2 = 0xe6ed16a0acd60d71ULL;
};

template<class ContainerAllocator>
struct DataType< ::whole_body_state_msgs::WholeBodyState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "whole_body_state_msgs/WholeBodyState";
  }

  static const char* value(const ::whole_body_state_msgs::WholeBodyState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::whole_body_state_msgs::WholeBodyState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This message describes the whole-body state of rigid body system.\n"
"#\n"
"# A whole-body state is defined by the centroidal, joints and contact states.\n"
"# The description of every element is defined in their respective\n"
"# messages. This state is described in respective time.\n"
"#\n"
"# The centroidal state describes\n"
"#  * the position, velocity and acceleration of the CoM,\n"
"#  * the base orientation and angular velocity, and\n"
"#  * the linear and angular momentum and their rates.\n"
"#\n"
"# The joint states describes:\n"
"#  * the joint name\n"
"#  * the position of the joint (rad or m),\n"
"#  * the velocity of the joint (rad/s or m/s),\n"
"#  * the effort that is applied in the joint (Nm or N).\n"
"# The contact state describes\n"
"#  * the frame name\n"
"#  * the pose of the contact,\n"
"#  * the velocity of the contact, and\n"
"#  * the wrench of the contact\n"
"# The header specifies the time at which the state is published.\n"
"\n"
"\n"
"std_msgs/Header header\n"
"\n"
"# This represent the time state\n"
"float64 time\n"
"\n"
"# This represents the base state (CoM motion, angular motion and centroidal momenta)\n"
"whole_body_state_msgs/CentroidalState centroidal\n"
"\n"
"# This represents the joint state (position, velocity, acceleration and effort)\n"
"whole_body_state_msgs/JointState[] joints\n"
"\n"
"# This represents the end-effector state (cartesian position and contact forces)\n"
"whole_body_state_msgs/ContactState[] contacts\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: whole_body_state_msgs/CentroidalState\n"
"# This message describes the states of a centroidal state.\n"
"#\n"
"# The centroidal state is defined by:\n"
"#  * the position, velocity and acceleration of the CoM,\n"
"#  * the base orientation and angular velocity, and\n"
"#  * the linear and angular momentum and their rates.\n"
"# where each quantity is expressed in the world frame.\n"
"\n"
"# Center of mass\n"
"geometry_msgs/Vector3 com_position\n"
"geometry_msgs/Vector3 com_velocity\n"
"\n"
"# Base orientation\n"
"geometry_msgs/Quaternion base_orientation\n"
"geometry_msgs/Vector3 base_angular_velocity\n"
"\n"
"# Linear and angular momentum\n"
"geometry_msgs/Twist momenta\n"
"geometry_msgs/Twist momenta_rate\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Twist\n"
"# This expresses velocity in free space broken into its linear and angular parts.\n"
"Vector3  linear\n"
"Vector3  angular\n"
"\n"
"================================================================================\n"
"MSG: whole_body_state_msgs/JointState\n"
"# This message describes the state of an actuated joints.\n"
"#\n"
"# The state of each joint (revolute or prismatic) is defined by:\n"
"#  * the joint name\n"
"#  * the position of the joint (rad or m),\n"
"#  * the velocity of the joint (rad/s or m/s),\n"
"#  * the acceleration of the joint (rad/s^2 or m/s^2), and\n"
"#  * the effort that is applied in the joint (Nm or N).\n"
"#\n"
"# Each joint is uniquely identified by its name\n"
"\n"
"\n"
"# Name of the joint\n"
"string name\n"
"\n"
"# States of the joint\n"
"float64 position\n"
"float64 velocity\n"
"float64 acceleration\n"
"float64 effort\n"
"\n"
"================================================================================\n"
"MSG: whole_body_state_msgs/ContactState\n"
"# This message describes the state of contact or end-effector body.\n"
"#\n"
"# The contact state is expressed in the world frame. A contact state is\n"
"# defined by:\n"
"#  * type of contact\n"
"#  * status of the contact\n"
"#  * the frame name\n"
"#  * the pose of the contact,\n"
"#  * the velocity of the contact,\n"
"#  * the wrench of the contact\n"
"#  * the normal vector that defines the surface\n"
"#  * the friction coefficient of the surface\n"
"#  * its classified state, if available\n"
"\n"
"# Type of contact identifiers\n"
"uint8 LOCOMOTION   = 0\n"
"uint8 MANIPULATION = 1\n"
"\n"
"# Type of contact states\n"
"uint8 UNKNOWN  = 0  # 0 because it's the default for int8\n"
"uint8 INACTIVE = 1\n"
"uint8 ACTIVE   = 2\n"
"uint8 SLIPPING = 3\n"
"\n"
"# Name of the contact body\n"
"string name\n"
"\n"
"# Type of contact\n"
"uint8 type\n"
"\n"
"# Contact status (e.g. from a contact state estimator)\n"
"uint8 status\n"
"\n"
"# State of the contact body\n"
"geometry_msgs/Pose pose\n"
"geometry_msgs/Twist velocity\n"
"geometry_msgs/Wrench wrench\n"
"geometry_msgs/Vector3 surface_normal\n"
"float64 friction_coefficient\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Wrench\n"
"# This represents force in free space, separated into\n"
"# its linear and angular parts.\n"
"Vector3  force\n"
"Vector3  torque\n"
;
  }

  static const char* value(const ::whole_body_state_msgs::WholeBodyState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::whole_body_state_msgs::WholeBodyState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.time);
      stream.next(m.centroidal);
      stream.next(m.joints);
      stream.next(m.contacts);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WholeBodyState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::whole_body_state_msgs::WholeBodyState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::whole_body_state_msgs::WholeBodyState_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "time: ";
    Printer<double>::stream(s, indent + "  ", v.time);
    s << indent << "centroidal: ";
    s << std::endl;
    Printer< ::whole_body_state_msgs::CentroidalState_<ContainerAllocator> >::stream(s, indent + "  ", v.centroidal);
    s << indent << "joints[]" << std::endl;
    for (size_t i = 0; i < v.joints.size(); ++i)
    {
      s << indent << "  joints[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::whole_body_state_msgs::JointState_<ContainerAllocator> >::stream(s, indent + "    ", v.joints[i]);
    }
    s << indent << "contacts[]" << std::endl;
    for (size_t i = 0; i < v.contacts.size(); ++i)
    {
      s << indent << "  contacts[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::whole_body_state_msgs::ContactState_<ContainerAllocator> >::stream(s, indent + "    ", v.contacts[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // WHOLE_BODY_STATE_MSGS_MESSAGE_WHOLEBODYSTATE_H
