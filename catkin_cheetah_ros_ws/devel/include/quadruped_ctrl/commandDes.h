// Generated by gencpp from file quadruped_ctrl/commandDes.msg
// DO NOT EDIT!


#ifndef QUADRUPED_CTRL_MESSAGE_COMMANDDES_H
#define QUADRUPED_CTRL_MESSAGE_COMMANDDES_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace quadruped_ctrl
{
template <class ContainerAllocator>
struct commandDes_
{
  typedef commandDes_<ContainerAllocator> Type;

  commandDes_()
    : com_position()
    , com_velocity()  {
    }
  commandDes_(const ContainerAllocator& _alloc)
    : com_position(_alloc)
    , com_velocity(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _com_position_type;
  _com_position_type com_position;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _com_velocity_type;
  _com_velocity_type com_velocity;





  typedef boost::shared_ptr< ::quadruped_ctrl::commandDes_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::quadruped_ctrl::commandDes_<ContainerAllocator> const> ConstPtr;

}; // struct commandDes_

typedef ::quadruped_ctrl::commandDes_<std::allocator<void> > commandDes;

typedef boost::shared_ptr< ::quadruped_ctrl::commandDes > commandDesPtr;
typedef boost::shared_ptr< ::quadruped_ctrl::commandDes const> commandDesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::quadruped_ctrl::commandDes_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::quadruped_ctrl::commandDes_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::quadruped_ctrl::commandDes_<ContainerAllocator1> & lhs, const ::quadruped_ctrl::commandDes_<ContainerAllocator2> & rhs)
{
  return lhs.com_position == rhs.com_position &&
    lhs.com_velocity == rhs.com_velocity;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::quadruped_ctrl::commandDes_<ContainerAllocator1> & lhs, const ::quadruped_ctrl::commandDes_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace quadruped_ctrl

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::quadruped_ctrl::commandDes_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::quadruped_ctrl::commandDes_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::quadruped_ctrl::commandDes_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::quadruped_ctrl::commandDes_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::quadruped_ctrl::commandDes_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::quadruped_ctrl::commandDes_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::quadruped_ctrl::commandDes_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c18e8a9edeafcfe5e0c5df4db6c81c60";
  }

  static const char* value(const ::quadruped_ctrl::commandDes_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc18e8a9edeafcfe5ULL;
  static const uint64_t static_value2 = 0xe0c5df4db6c81c60ULL;
};

template<class ContainerAllocator>
struct DataType< ::quadruped_ctrl::commandDes_<ContainerAllocator> >
{
  static const char* value()
  {
    return "quadruped_ctrl/commandDes";
  }

  static const char* value(const ::quadruped_ctrl::commandDes_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::quadruped_ctrl::commandDes_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[] com_position\n"
"float64[] com_velocity\n"
;
  }

  static const char* value(const ::quadruped_ctrl::commandDes_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::quadruped_ctrl::commandDes_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.com_position);
      stream.next(m.com_velocity);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct commandDes_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::quadruped_ctrl::commandDes_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::quadruped_ctrl::commandDes_<ContainerAllocator>& v)
  {
    s << indent << "com_position[]" << std::endl;
    for (size_t i = 0; i < v.com_position.size(); ++i)
    {
      s << indent << "  com_position[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.com_position[i]);
    }
    s << indent << "com_velocity[]" << std::endl;
    for (size_t i = 0; i < v.com_velocity.size(); ++i)
    {
      s << indent << "  com_velocity[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.com_velocity[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // QUADRUPED_CTRL_MESSAGE_COMMANDDES_H
