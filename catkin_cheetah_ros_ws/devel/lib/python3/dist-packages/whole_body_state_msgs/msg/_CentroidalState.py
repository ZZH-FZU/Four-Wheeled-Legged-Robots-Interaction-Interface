# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from whole_body_state_msgs/CentroidalState.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class CentroidalState(genpy.Message):
  _md5sum = "23ae41306b44b6e3e1e14f56a5849ac7"
  _type = "whole_body_state_msgs/CentroidalState"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# This message describes the states of a centroidal state.
#
# The centroidal state is defined by:
#  * the position, velocity and acceleration of the CoM,
#  * the base orientation and angular velocity, and
#  * the linear and angular momentum and their rates.
# where each quantity is expressed in the world frame.

# Center of mass
geometry_msgs/Vector3 com_position
geometry_msgs/Vector3 com_velocity

# Base orientation
geometry_msgs/Quaternion base_orientation
geometry_msgs/Vector3 base_angular_velocity

# Linear and angular momentum
geometry_msgs/Twist momenta
geometry_msgs/Twist momenta_rate

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular
"""
  __slots__ = ['com_position','com_velocity','base_orientation','base_angular_velocity','momenta','momenta_rate']
  _slot_types = ['geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Quaternion','geometry_msgs/Vector3','geometry_msgs/Twist','geometry_msgs/Twist']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       com_position,com_velocity,base_orientation,base_angular_velocity,momenta,momenta_rate

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CentroidalState, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.com_position is None:
        self.com_position = geometry_msgs.msg.Vector3()
      if self.com_velocity is None:
        self.com_velocity = geometry_msgs.msg.Vector3()
      if self.base_orientation is None:
        self.base_orientation = geometry_msgs.msg.Quaternion()
      if self.base_angular_velocity is None:
        self.base_angular_velocity = geometry_msgs.msg.Vector3()
      if self.momenta is None:
        self.momenta = geometry_msgs.msg.Twist()
      if self.momenta_rate is None:
        self.momenta_rate = geometry_msgs.msg.Twist()
    else:
      self.com_position = geometry_msgs.msg.Vector3()
      self.com_velocity = geometry_msgs.msg.Vector3()
      self.base_orientation = geometry_msgs.msg.Quaternion()
      self.base_angular_velocity = geometry_msgs.msg.Vector3()
      self.momenta = geometry_msgs.msg.Twist()
      self.momenta_rate = geometry_msgs.msg.Twist()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_25d().pack(_x.com_position.x, _x.com_position.y, _x.com_position.z, _x.com_velocity.x, _x.com_velocity.y, _x.com_velocity.z, _x.base_orientation.x, _x.base_orientation.y, _x.base_orientation.z, _x.base_orientation.w, _x.base_angular_velocity.x, _x.base_angular_velocity.y, _x.base_angular_velocity.z, _x.momenta.linear.x, _x.momenta.linear.y, _x.momenta.linear.z, _x.momenta.angular.x, _x.momenta.angular.y, _x.momenta.angular.z, _x.momenta_rate.linear.x, _x.momenta_rate.linear.y, _x.momenta_rate.linear.z, _x.momenta_rate.angular.x, _x.momenta_rate.angular.y, _x.momenta_rate.angular.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.com_position is None:
        self.com_position = geometry_msgs.msg.Vector3()
      if self.com_velocity is None:
        self.com_velocity = geometry_msgs.msg.Vector3()
      if self.base_orientation is None:
        self.base_orientation = geometry_msgs.msg.Quaternion()
      if self.base_angular_velocity is None:
        self.base_angular_velocity = geometry_msgs.msg.Vector3()
      if self.momenta is None:
        self.momenta = geometry_msgs.msg.Twist()
      if self.momenta_rate is None:
        self.momenta_rate = geometry_msgs.msg.Twist()
      end = 0
      _x = self
      start = end
      end += 200
      (_x.com_position.x, _x.com_position.y, _x.com_position.z, _x.com_velocity.x, _x.com_velocity.y, _x.com_velocity.z, _x.base_orientation.x, _x.base_orientation.y, _x.base_orientation.z, _x.base_orientation.w, _x.base_angular_velocity.x, _x.base_angular_velocity.y, _x.base_angular_velocity.z, _x.momenta.linear.x, _x.momenta.linear.y, _x.momenta.linear.z, _x.momenta.angular.x, _x.momenta.angular.y, _x.momenta.angular.z, _x.momenta_rate.linear.x, _x.momenta_rate.linear.y, _x.momenta_rate.linear.z, _x.momenta_rate.angular.x, _x.momenta_rate.angular.y, _x.momenta_rate.angular.z,) = _get_struct_25d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_25d().pack(_x.com_position.x, _x.com_position.y, _x.com_position.z, _x.com_velocity.x, _x.com_velocity.y, _x.com_velocity.z, _x.base_orientation.x, _x.base_orientation.y, _x.base_orientation.z, _x.base_orientation.w, _x.base_angular_velocity.x, _x.base_angular_velocity.y, _x.base_angular_velocity.z, _x.momenta.linear.x, _x.momenta.linear.y, _x.momenta.linear.z, _x.momenta.angular.x, _x.momenta.angular.y, _x.momenta.angular.z, _x.momenta_rate.linear.x, _x.momenta_rate.linear.y, _x.momenta_rate.linear.z, _x.momenta_rate.angular.x, _x.momenta_rate.angular.y, _x.momenta_rate.angular.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.com_position is None:
        self.com_position = geometry_msgs.msg.Vector3()
      if self.com_velocity is None:
        self.com_velocity = geometry_msgs.msg.Vector3()
      if self.base_orientation is None:
        self.base_orientation = geometry_msgs.msg.Quaternion()
      if self.base_angular_velocity is None:
        self.base_angular_velocity = geometry_msgs.msg.Vector3()
      if self.momenta is None:
        self.momenta = geometry_msgs.msg.Twist()
      if self.momenta_rate is None:
        self.momenta_rate = geometry_msgs.msg.Twist()
      end = 0
      _x = self
      start = end
      end += 200
      (_x.com_position.x, _x.com_position.y, _x.com_position.z, _x.com_velocity.x, _x.com_velocity.y, _x.com_velocity.z, _x.base_orientation.x, _x.base_orientation.y, _x.base_orientation.z, _x.base_orientation.w, _x.base_angular_velocity.x, _x.base_angular_velocity.y, _x.base_angular_velocity.z, _x.momenta.linear.x, _x.momenta.linear.y, _x.momenta.linear.z, _x.momenta.angular.x, _x.momenta.angular.y, _x.momenta.angular.z, _x.momenta_rate.linear.x, _x.momenta_rate.linear.y, _x.momenta_rate.linear.z, _x.momenta_rate.angular.x, _x.momenta_rate.angular.y, _x.momenta_rate.angular.z,) = _get_struct_25d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_25d = None
def _get_struct_25d():
    global _struct_25d
    if _struct_25d is None:
        _struct_25d = struct.Struct("<25d")
    return _struct_25d
